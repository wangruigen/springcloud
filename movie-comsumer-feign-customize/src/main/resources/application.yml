### 服务提供者向eureka server注册的配置
server:
  port: 8099
  context-path: /movie-consumer-feign-customize

spring:
  application:
    name: @project.artifactId@ #注册到eureka server上的应用名，我这里使用的是artifactId
  cloud:
    service-registry:
      auto-registration:
        enabled: true  #将服务注册到注册中心 默认是true
eureka:
  client:
    service-url:
      #将应用注册到注册中心，配置注册中心地址（也可以配置一个，注册中心会同步节点，最好是配置两个，避免极端情况，节点同步不了）
      defaultZone: http://localhost:8761/eureka
  instance:
    prefer-ip-address: true #将自己ip注册到eureka server,默认false,如果false,表示将系统所在的hostname注册到eureka server


#使用配置文件配置指定名称的feign client#=========
feign:
  client:
    config: # Map<String, FeignClientConfiguration> config = new HashMap<>(); 配置项就是构建key value
      #对feign client name=user-provider的服务进行配置
      user-provider:
        #private Logger.Level loggerLevel;
        loggerLevel: full #日志级别
        #private Integer connectTimeout;
        connectTimeout: 5000 #连接超时时间 java.net.HttpURLConnection#getConnectTimeout()，如果使用Hystrix，该配置无效
        #private Integer readTimeout;
        readTimeout: 5000 #读取超时时间  java.net.HttpURLConnection#getReadTimeout()，如果使用Hystrix，该配置无效
        #private Class<Retryer> retryer;
        retryer:  #重试接口实现类，默认实现 feign.Retryer.Default
        #private Class<ErrorDecoder> errorDecoder;
        errorDecoder: #feign的错误解码器
        #private List<Class<RequestInterceptor>> requestInterceptors;
        requestInterceptors: #配置拦截器
        #private Boolean decode404;
        decode404: #是否开启404编码

#feign:
#  client:
#    config: # Map<String, FeignClientConfiguration> config = new HashMap<>(); 配置项就是构建key value
      #对全局的deign client的服务进行配置
#      default:
        #private Logger.Level loggerLevel;
#        loggerLevel: full #日志级别
        #private Integer connectTimeout;
#        connectTimeout: 5000 #连接超时时间 java.net.HttpURLConnection#getConnectTimeout()，如果使用Hystrix，该配置无效
        #private Integer readTimeout;
#        readTimeout: 5000 #读取超时时间  java.net.HttpURLConnection#getReadTimeout()，如果使用Hystrix，该配置无效
        #private Class<Retryer> retryer;
#        retryer:  #重试接口实现类，默认实现 feign.Retryer.Default
        #private Class<ErrorDecoder> errorDecoder;
#        errorDecoder: #feign的错误解码器
        #private List<Class<RequestInterceptor>> requestInterceptors;
#        requestInterceptors: #配置拦截器
        #private Boolean decode404;
#       decode404: #是否开启404编码
