### 服务提供者向eureka server注册的配置
server:
  port: 8010
  context-path: /movie-consumer-ribbon-customize

spring:
  application:
    name: @project.artifactId@ #注册到eureka server上的应用名，我这里使用的是artifactId
  cloud:
    service-registry:
      auto-registration:
        enabled: true  #将服务注册到注册中心 默认是true
eureka:
  client:
    service-url:
      #将应用注册到注册中心，配置注册中心地址（也可以配置一个，注册中心会同步节点，最好是配置两个，避免极端情况，节点同步不了）
      defaultZone: http://127.0.0.1:8761/eureka
  instance:
    prefer-ip-address: true #将自己ip注册到eureka server,默认false,如果false,表示将系统所在的hostname注册到eureka server


###==============================使用属性自定义ribbon配置,配置文件配置的方式优先级高于代码编程配置的方式
#格式：RibbonClientName.ribbon.NF*className: classNameImpl (ribbon客户端名称.ribbon.NF*className: NF*classNameImpl)
#RibbonClientName:配置在eureka server的实例，serviceId,若不配置，则对全局client instance有效。
#NF*className： NFLoadBalancerCLassName:配置ILoadBalancer的实现类
#               NFLoadBalancerRuleClassName:配置IRule的实现类
#               NFLoadBalancerPingClassName:配置IPing的实现类
#               NIWSServerListClassName: 配置ServerList的实现类
#               NIWSServerListFilterClassName: 配置ServerListFilter的实现类
#下面是配置实例为user-provider-metadata实例的ribbon负载均衡策略为随机选择实例
user-provider-metadata:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
    #配置请求列表，可以从listOfServers的列表中选择user-provider-metadata的请求。不配置的话所有的user-provider-metadata实例根据负载均衡策略进行请求
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
  listOfServers: localhost:9001,localhost:9000 #user-provider-metadata实例只会从这里选择服务列表

#配置多个ribbon client负载均衡策略
user-provider-metadata1:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

user-provider-metadata2:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule


#对所有的ribbonClient实例使用RandomRule
#ribbon:
#  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
ribbon:
  eager-load:
    clients: user-provider-metadata,user-provider-metadata2 #饥饿加载的ribbon client
    enabled: true #饥饿加载 默认是false(懒加载，只有在被使用时才执行初始化操作)
